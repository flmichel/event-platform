role NONE {
    Event {
      //1.2
      read(categories)
      read(title), read(description), read(location), read(date), read(owner) constrainedBy [not self.private]
    }
    Person{
      create
      update(role) constrainedBy [self.role=null and value = Role::FREEUSER]
      update(username) constrainedBy [self.username=null]
      update(password) constrainedBy [self.password=null]
      read(username), read(password), read(role) constrainedBy[caller=null]
      read(moderates)
    }
    Category{
      //7.3
      read(name), read(events), read(moderators)
    }

}

role FREEUSER {

  Person {
    //1.4
    add(events) constrainedBy [target.owner = null and self = caller]

    //2.3 (Owner wants to be able to add themself to manager before adding themself to attendants)
    add(manages) constrainedBy [target.owner = caller and (self.events->includes(target) or self.attends->includes(target))]
    remove(manages) constrainedBy [(target.owner = caller and self <> caller) or (target.owner <> caller and self.manages->includes(target) and self = caller)]

    //2.5+2.7
    add(attends) constrainedBy [(target.owner = caller and self.events->includes(target)) or self.invitations->exists(i|i.invitee = caller and self=caller and i.event=target) or (target.managedBy->includes(caller) and target.requesters->includes(self))] // or ...
    //2.4+2.6
    remove(attends) constrainedBy [(target.managedBy->includes(caller) or self = caller) and self.manages->excludes(target)]

    //3.1+3.2
    add(requests) constrainedBy [self = caller and not target.private]
    remove(requests) constrainedBy [self = caller or target.managedBy->includes(caller)]

    //3.2
    add(invitations) constrainedBy [target.invitee = null and target.event.managedBy->includes(caller) and self.role <> Role::NONE]
    add(invites) constrainedBy [target.invitedBy = null and target.event.managedBy->includes(caller) and self = caller]
    remove(invites) constrainedBy [target.event.managedBy->includes(caller)]
    //3.2 + 3.3
    remove(invitations) constrainedBy[target.event.managedBy->includes(caller) or target.invitee = caller]

    //4.1
    add(authored) constrainedBy [target.author = null and self = caller]
    //4.2
    remove(authored) constrainedBy [target.author = caller or target.postedAt.managedBy->includes(caller)]

    //6.1
    read(name),read(surname),read(username),read(role)
    //6.2
    update(password), update(name), update(surname),update(username) constrainedBy [self = caller]
    //6.3
    read(events), read(manages), read(attends), read(requests), read(authored), read(subscriptions), read(invites), read(invitations) constrainedBy [self=caller]
    //6.4
    read(moderates)

    //7.2
    remove(moderates) constrainedBy [self = caller]

  }

  Event {
    create
    //1.4
    update(owner) constrainedBy [self.owner = null and value = caller]
    //2.3 (Owner add himself at init ?)
    add(managedBy) constrainedBy [self.owner = caller and (target = self.owner or self.attendants->includes(target))]
    remove(managedBy) constrainedBy [(self.owner = caller and target <> caller) or (self.owner <> caller and self.managedBy->includes(caller) and target=caller)]

    //2.5+2.7
    add(attendants) constrainedBy [(self.owner = caller and target = self.owner) or self.invitations->exists(i|i.invitee=target and i.event = self and target=caller) or self.managedBy->includes(caller) and self.requesters->includes(target)] // or ...
    //2.4+2.6
    remove(attendants) constrainedBy [(self.managedBy->includes(caller) or target = caller) and self.managedBy->excludes(target)]


    //1.1
    update(private) constrainedBy [self.private = null and not value]

    //1.2+1.3
    read(categories)
    read(title), read(description), read(location), read(date), read(owner) constrainedBy [not self.private or self.attendants->includes(caller) or self.invitations.invitee->includes(caller)]

    //2.1+2.2
    read(managedBy), read(attendants) constrainedBy [not self.private or self.attendants->includes(caller) or self.invitations.invitee->includes(caller)]

    //1.4
    update(title), update(description), update(location), update(date) constrainedBy [self.managedBy->includes(caller)]

    add(categories) constrainedBy [self.managedBy->includes(caller) and self.categories->excludes(target)]
    remove(categories) constrainedBy [self.managedBy->includes(caller) and self.categories->includes(target)]

    //3.1+3.2
    add(requesters) constrainedBy [target = caller and not self.private]
    remove(requesters) constrainedBy [target = caller or self.managedBy->includes(caller)]
    //3.2
    add(invitations) constrainedBy [target.event = null and self.managedBy->includes(caller)]
    remove(invitations) constrainedBy [self.managedBy->includes(caller) and target.event = self or target.invitee = caller]
    //3.3
    read(requesters), read(invitations) constrainedBy [self.managedBy->includes(caller)]

    //4.1
    read(messageBoard) constrainedBy [self.attendants->includes(caller)]// and not target.locked]
    add(messageBoard) constrainedBy [target.postedAt = null and self.attendants->includes(caller)]
    //4.2
    remove(messageBoard) constrainedBy [target.author = caller or self.managedBy->includes(caller)]

  }
  Category {
    //1.2
    add(events) constrainedBy [target.managedBy->includes(caller) and self.events->excludes(target)]
    remove(events) constrainedBy [target.managedBy->includes(caller) and self.events->includes(target)]

    //7.2
    remove(moderators) constrainedBy [target = caller]
    //7.1+7.3
    read(name), read(events), read(moderators)
    read(subscribers) constrainedBy [self.moderators->includes(caller)]
  }

  Invite {
    //3.2 + 3.4
    create
    update(invitee) constrainedBy [self.invitee = null and self.event.managedBy->includes(caller) and value.role <> Role::NONE]
    update(invitedBy) constrainedBy [self.invitedBy = null and self.event.managedBy->includes(caller) and value = caller]
    update(event) constrainedBy [self.event = null and value.managedBy->includes(caller)]
    //clarity
    read(event), read(invitedBy), read(invitee) constrainedBy [self.invitee = caller or self.event.managedBy->includes(caller)]

    delete constrainedBy [(self.event.managedBy->includes(caller) or self.invitee = caller)]
  }

  Post {
    create
    //4.1+5.6
    read(author),read(content),read(postedAt) constrainedBy [(self.postedAt.attendants->includes(caller) and not self.locked) or self.postedAt.managedBy->includes(caller)]
    //4.1+4.3
    update(postedAt) constrainedBy [self.postedAt = null and value.attendants->includes(caller)]
    //4.3
    update(author) constrainedBy [self.author = null and value = caller]
    update(content) constrainedBy [self.content = null]

    //4.1+4.5+5.1+5.2
    update(flagged) constrainedBy [(self.flagged = null and not value) or (self.postedAt.managedBy->includes(caller) and self.flagged) or (self.postedAt.attendants->includes(caller) and value and not self.locked)]
    
    //4.1+4.5+5.1
    update(locked) constrainedBy [(self.locked = null and not value) or (not self.locked and self.postedAt.managedBy->includes(caller))]

    //5.5+5.6
    read(flagged), read(locked) constrainedBy [self.postedAt.managedBy->includes(caller)]

    //4.2+5.7
    delete constrainedBy [(self.author = caller or self.postedAt.managedBy->includes(caller)) and not self.locked]
  }

}

role PREMIUMUSER extends FREEUSER {
  Event{
    update(private) constrainedBy [self.private = null]
  }
}

role MODERATOR extends PREMIUMUSER {

}

role ADMIN extends MODERATOR {

}

// The SYSTEM role is required for test data setup
role SYSTEM {
  Person {
    fullAccess
  }
  Event {
    fullAccess
  }
  Category {
    fullAccess
  }
  Invite {
    fullAccess
  }
  Post {
    fullAccess
  }
}
